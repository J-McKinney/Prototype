{"version":3,"sources":["utils/API.js","pages/SpeechRecognition/Dictaphone.js","App.js","index.js"],"names":["sentenceData","axios","post","window","SpeechRecognition","webkitSpeechRecognition","recognition","continous","maxAlternatives","interimResults","lang","finalTranscript","interimTranscript","randomWordArr","Dictaphone","Component","constructor","props","super","handleInputChange","event","preventDefault","target","name","value","this","setState","stopRecording","isRecording","onSave","blobObject","downloadLinkURL","blobURL","onStop","state","listening","sentence","recordingStarted","recordingStopped","toggleListen","bind","handleListen","resetTranscripts","submitTranscripts","randomWordGenerator","start","onend","stop","onresult","i","resultIndex","results","length","transcript","isFinal","document","getElementById","innerHTML","transcriptArr","split","stopCmd","slice","finalText","join","onerror","console","log","error","API","catch","err","onBlock","randomWord","Math","floor","random","word","render","id","Container","Row","Col","Button","onClick","className","record","backgroundColor","visualSetting","audioBitsPerSecond","strokeColor","ref","controls","src","controlsList","onChange","App","ReactDOM"],"mappings":"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","file":"static/js/main.973733c7.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n  // Gets all sentences\n  getSentences: function() {\n    return axios.get(\"/api/sentences\");\n  },\n  // Gets the sentence with the given id\n  getSentence: function(id) {\n    return axios.get(\"/api/sentences/\" + id);\n  },\n  // Deletes the sentence with the given id\n  deleteSentence: function(id) {\n    return axios.delete(\"/api/sentences/\" + id);\n  },\n  // Saves a sentence to the database\n  saveSentence: function(sentenceData) {\n    return axios.post(\"/api/sentences\", sentenceData);\n  }\n};\n","import React, { Component } from \"react\";\r\nimport { ReactMic } from \"react-mic\";\r\nimport API from \"../../utils/API\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport \"./styles/Dictaphone.css\";\r\n\r\n//------------------------SPEECH RECOGNITION-----------------------------\r\n\r\nwindow.SpeechRecognition =\r\n  window.SpeechRecognition || window.webkitSpeechRecognition;\r\nlet recognition = new window.SpeechRecognition();\r\n\r\nrecognition.continous = true;\r\nrecognition.maxAlternatives = 10;\r\nrecognition.interimResults = true;\r\nrecognition.lang = \"en-US\";\r\nlet finalTranscript = \"\";\r\nlet interimTranscript = \"\";\r\nlet randomWordArr = [\r\n  // \"Love\",\r\n  // \"Night\",\r\n  // \"Sweet\",\r\n  // \"Dream\",\r\n  // \"Work\",\r\n  // \"Phone\",\r\n  // \"One\",\r\n  // \"Beauty\",\r\n  // \"Late\",\r\n  // \"Good\",\r\n  // \"Forever\",\r\n  // \"Rainbow\",\r\n  // \"Dance\",\r\n  // \"Dangerous\",\r\n  // \"Baby\",\r\n  // \"Queen\",\r\n  // \"Hair\",\r\n  // \"Light\",\r\n  // \"Heart\",\r\n  // \"Honey\",\r\n  // \"Broke\",\r\n  // \"Name\",\r\n  // \"Crazy\",\r\n  // \"Woman\",\r\n  // \"Deep\",\r\n  // \"Again\",\r\n  // \"World\",\r\n  // \"Girl\",\r\n  // \"Fire\",\r\n  // \"Lady\",\r\n  // \"Best\",\r\n  // \"Lost\",\r\n  // \"Trouble\",\r\n  // \"Burn\",\r\n  // \"Somebody\",\r\n  // \"Sorry\",\r\n  // \"Pretty\",\r\n  // \"War\",\r\n  // \"Stay\",\r\n  // \"Slow\",\r\n  // \"Song\",\r\n  // \"Ring\",\r\n  // \"Cream\",\r\n  // \"Care\",\r\n  // \"Have\",\r\n  // \"Need\",\r\n  // \"Hold\",\r\n  // \"God\",\r\n  // \"Deep\",\r\n  // \"Together\",\r\n  // \"Ain't\",\r\n  // \"Imagine\",\r\n  // \"Freedom\",\r\n  // \"Fall\",\r\n  // \"Think\",\r\n  // \"Broken\",\r\n  // \"Side\",\r\n  // \"Mine\",\r\n  // \"Boy\",\r\n  // \"Never\",\r\n  // \"Kiss\",\r\n  // \"Wine\",\r\n  // \"Girl\",\r\n  // \"Bad\",\r\n  // \"Hurt\",\r\n  // \"Remember\",\r\n  // \"Only\",\r\n  // \"Perfect\",\r\n  // \"Want\",\r\n  // \"Time\",\r\n  // \"Control\",\r\n  // \"Blank\",\r\n  // \"Liar\",\r\n  // \"Breathe\",\r\n  // \"Cry\",\r\n  // \"Ready\",\r\n  \"Inside-Out\",\r\n  // \"Eyes\",\r\n  // \"Sexy\",\r\n  // \"Dead\",\r\n  // \"Blame\",\r\n  // \"Blood\",\r\n  // \"Make-Up\",\r\n  // \"Proud\",\r\n  // \"Mad\",\r\n  // \"Close\",\r\n  // \"Last\",\r\n  // \"Man\",\r\n  // \"Young\",\r\n  // \"Style\",\r\n  // \"Alone\",\r\n  // \"Life\",\r\n  // \"Rain\",\r\n  // \"Forget\",\r\n  // \"Quit\",\r\n  // \"Friend\",\r\n  // \"Space\",\r\n  // \"Light\",\r\n  // \"Song\",\r\n  // \"Listen\",\r\n  // \"Feel\",\r\n  // \"Happy\",\r\n  // \"Never\",\r\n  // \"Home\",\r\n  // \"Jump\",\r\n  // \"Wild\",\r\n  // \"Angel\",\r\n  // \"Touch\",\r\n  // \"Head\",\r\n  \"Incredible\"\r\n];\r\n\r\n//------------------------COMPONENT-----------------------------\r\nclass Dictaphone extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Setting state for the SpeechRec, all speeches and each individual sentence before submit\r\n    this.state = {\r\n      listening: false,\r\n      sentence: \"\",\r\n      // Setting state for the react-mic\r\n      downloadLinkURL: null,\r\n      isRecording: false,\r\n      recordingStarted: false,\r\n      recordingStopped: false\r\n    };\r\n\r\n    this.toggleListen = this.toggleListen.bind(this);\r\n    this.handleListen = this.handleListen.bind(this);\r\n    this.resetTranscripts = this.resetTranscripts.bind(this);\r\n    this.submitTranscripts = this.submitTranscripts.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.randomWordGenerator = this.randomWordGenerator.bind(this);\r\n    // this.randomColorGenerator = this.randomColorGenerator.bind(this);\r\n  }\r\n\r\n  // Toggle listening commands when the Start/Stop button is pressed\r\n  toggleListen() {\r\n    this.setState(\r\n      {\r\n        // speech recognition\r\n        listening: !this.state.listening,\r\n        // react-mic\r\n        isRecording: !this.state.isRecording,\r\n        recordingStarted: !this.state.recordingStarted,\r\n        recordingStopped: !this.state.recordingStopped\r\n      },\r\n      // speech recognition\r\n      this.handleListen\r\n    );\r\n  }\r\n\r\n  // speech recognition\r\n  handleListen() {\r\n    if (this.state.listening) {\r\n      recognition.start();\r\n      \r\n      // this is what causes that weird jingle noise when deployed on the phone\r\n      recognition.onend = () => {\r\n\r\n        // this only lets you record your voice once and if you stop talking\r\n        // it will not write anything else after it\r\n        // recognition.onstart = () => {\r\n\r\n        // console.log(\"...continue listening...\");\r\n        recognition.start();\r\n      };\r\n      // };\r\n    } else {\r\n      recognition.stop();\r\n      recognition.onend = () => {\r\n        // console.log(\"Stopped listening per click\");\r\n      };\r\n    }\r\n\r\n    // recognition.onstart = () => {\r\n    //   console.log(\"Listening!\");\r\n    // };\r\n\r\n    // speech recognition\r\n    // Interim and final transcript are diplayed on the screen\r\n    finalTranscript = \"\";\r\n    recognition.onresult = event => {\r\n      interimTranscript = \"\";\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        const transcript = event.results[i][0].transcript;\r\n        if (event.results[i].isFinal) finalTranscript += transcript + \" \";\r\n        else interimTranscript += transcript;\r\n        // console.log(finalTranscript);\r\n      }\r\n      document.getElementById(\r\n        \"interimTranscript\"\r\n      ).innerHTML = interimTranscript;\r\n      document.getElementById(\"finalTranscript\").innerHTML = finalTranscript;\r\n\r\n      //-------------------------COMMANDS------------------------------------\r\n      // speech recognition\r\n      // If the user says and the SpeechRec recognizes, \"stop listening\", the program turns off the recorder\r\n      // and stops listening\r\n      const transcriptArr = finalTranscript.split(\"  \");\r\n      const stopCmd = transcriptArr.slice(-3, -1);\r\n      // console.log(\"stopCmd\", stopCmd);\r\n      if (stopCmd[0] === \"stop\" && stopCmd[1] === \"listening\") {\r\n        recognition.stop();\r\n        recognition.onend = () => {\r\n          const finalText = transcriptArr.slice(0, -3).join(\" \");\r\n          document.getElementById(\"finalTranscript\").innerHTML = finalText;\r\n        };\r\n      }\r\n      this.setState({ sentence: transcriptArr[0] });\r\n      // console.log(transcriptArr[0]);\r\n    };\r\n\r\n    //-----------------------------------------------------------------------\r\n    // speech recognition\r\n    recognition.onerror = event => {\r\n      console.log(\"Error occurred in recognition: \" + event.error);\r\n    };\r\n  }\r\n\r\n  // speech recognition\r\n  // Reset the interim and final transcript to not display anymore\r\n  resetTranscripts() {\r\n    document.getElementById(\"interimTranscript\").innerHTML = interimTranscript =\r\n      \"\";\r\n    document.getElementById(\"finalTranscript\").innerHTML = finalTranscript = \"\";\r\n    // console.log(\"All Records Cleared\");\r\n  }\r\n\r\n  // speech recognition\r\n  // Handles updating component state when the user speaks into the input field\r\n  handleInputChange = event => {\r\n    event.preventDefault();\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  // speech recognition\r\n  // Sumbit your finalTranscript to the database\r\n  submitTranscripts() {\r\n    if (this.state.sentence) {\r\n      API.saveSentence({\r\n        sentence: this.state.sentence\r\n      }).catch(err => console.log(err));\r\n    }\r\n    // console.log(\"Transcript Submitted\");\r\n    // console.log(this.state.sentence);\r\n  }\r\n\r\n  // react-mic\r\n  stopRecording = () => {\r\n    this.setState({ isRecording: false });\r\n  };\r\n\r\n  // react-mic\r\n  onSave = blobObject => {\r\n    this.setState({\r\n      downloadLinkURL: blobObject.blobURL\r\n    });\r\n  };\r\n\r\n  // react-mic\r\n  onStop = blobObject => {\r\n    this.setState({ blobURL: blobObject.blobURL });\r\n  };\r\n\r\n  // react-mic\r\n  onBlock() {\r\n    console.log(\"onBlock\");\r\n  }\r\n\r\n  randomWordGenerator(event) {\r\n    event.preventDefault();\r\n    var randomWord = Math.floor(Math.random() * randomWordArr.length);\r\n    var word = randomWordArr[randomWord];\r\n    // console.log(word);\r\n    document.getElementById(\"randomWordPlacement\").innerHTML = word;\r\n  }\r\n\r\n  // randomColorGenerator() {\r\n  //   var randomColor = Math.floor(Math.random() * randomColorArr.length);\r\n  //   var color = randomColorArr[randomColor];\r\n  //   console.log(color);\r\n  // }\r\n\r\n  render() {\r\n    // react-mic\r\n    const { blobURL, isRecording } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div id=\"wrapper\">\r\n          <Container id=\"randomWordContainer\">\r\n            <Row id=\"randomWordRow\">\r\n              <Col id=\"randomWordCol\">\r\n                <div id=\"randomWordPlacement\">\r\n                  <br />\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n          <Container>\r\n            <Row id=\"randomWordButtonRow\">\r\n              {/* changed onClick laptop/desktop to onTouchStart mobile */}\r\n              <Button id=\"randomWordButton\" onClick={this.randomWordGenerator}>\r\n                <div id=\"newWordText\">Click For New Word</div>\r\n              </Button>\r\n            </Row>\r\n            <Row id=\"oscilloscopeRow\">\r\n              <Col>\r\n                <ReactMic\r\n                  className=\"oscilloscope\"\r\n                  record={isRecording}\r\n                  backgroundColor=\"#525252\"\r\n                  visualSetting=\"frequencyBars\"\r\n                  audioBitsPerSecond={128000}\r\n                  onStop={this.onStop}\r\n                  onSave={this.onSave}\r\n                  onBlock={this.onBlock}\r\n                  strokeColor=\"#4bf7f7\"\r\n                />\r\n                <div id=\"audio-playback-controls\">\r\n                  <audio\r\n                    ref=\"audioSource\"\r\n                    controls=\"controls\"\r\n                    src={blobURL}\r\n                    controlsList=\"nodownload\"\r\n                  />\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n          <Container id=\"finalTranscriptContainer\">\r\n            <div id=\"interimTranscript\" />\r\n            <div\r\n              id=\"finalTranscript\"\r\n              value={this.state.sentence}\r\n              onChange={this.handleInputChange}\r\n            >\r\n              <br />\r\n            </div>\r\n          </Container>\r\n          <Container id=\"buttonContainer\">\r\n            <Row id=\"buttonRow\">\r\n              <Col>\r\n                <Button id=\"recordButton\" onClick={this.toggleListen}>\r\n                  <i id=\"favIcon\" className=\"far fa-stop-circle\"></i>\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button id=\"resetButton\" onClick={this.resetTranscripts}>\r\n                  <i id=\"favIcon\" className=\"fas fa-undo\"></i>\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button id=\"submitButton\" onClick={this.submitTranscripts}>\r\n                  <i id=\"favIcon\" className=\"far fa-thumbs-up\"></i>\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dictaphone;\r\n","import React from \"react\";\nimport Dictaphone from \"./pages/SpeechRecognition/Dictaphone\";\n\nfunction App() {\n  return (\n    <>\n      <Dictaphone />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}